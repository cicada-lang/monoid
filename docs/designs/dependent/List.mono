datatype List Type -- Type then
  case list_null -- List end
  case list_cons 'A 'A List -- 'A List end
end

// The input and output of `claim` can be viewed as
// what should be prepared before cutting the defined words,
// and what should be cleaned up after cutting the defined words.

claim list_append
  Type 'A set_type // set type of a pattern variable.
  'A List
  'A List
  --------
  'A List
end

define list_append
  $A $x $y
  x match
    case list_null y end
    case list_cons head tail
      // (lit A) cut to A itself -- instead of the type of A
      y tail (lit A) list_append
      head list_cons
    end
  end
end

claim list_map
  Type 'A set_type
  Type 'B set_type
  [ 'A -- 'B ]
  'A List
  ----------
  'B List
end

define list_map
  $A $B $f $x
  x match
    case list_null x end
    case list_case
      head tail
      tail f (lit B) (lit A) list_map
      head f execute list_cons
    end
  end
end
